openapi: 3.0.3
info:
  title: PoPC (Proof of Physical Capture) Verification API
  version: 1.0.0
  description: |
    API for verifying cryptographic authenticity of media captured by trusted devices.

    The PoPC API allows you to:
    - Verify photos/videos were captured by enrolled devices and have not been tampered with
    - Enroll new devices with hardware attestation
    - Request RFC-3161 trusted timestamps
    - Generate court-admissible evidence packages
  contact:
    name: PoPC Support
    email: support@popc.example.com
  license:
    name: MIT

servers:
  - url: https://api.popc.example.com
    description: Production
  - url: https://staging-api.popc.example.com
    description: Staging
  - url: http://localhost:3000
    description: Local development

security:
  - ApiKeyAuth: []

tags:
  - name: Verification
    description: Media verification endpoints
  - name: Enrollment
    description: Device enrollment and management
  - name: Timestamp
    description: Trusted timestamp services

paths:
  /v1/verify:
    post:
      summary: Verify media authenticity
      description: |
        Verifies a photo or video using one of two modes:

        **Certified mode** (when manifest is present):
        1. Computes SHA-256 hash of the asset
        2. Parses the C2PA manifest
        3. Verifies content binding (hash match)
        4. Validates cryptographic signature
        5. Checks device certificate chain and attestation
        6. Applies policy rules
        7. Records verification in transparency log
        8. Returns verdict with detailed reasons

        **Heuristic mode** (when manifest is missing):
        1. Computes SHA-256 hash of the asset
        2. Extracts EXIF metadata (camera, software, GPS, timestamps)
        3. Performs JPEG compression analysis
        4. Optionally runs PRNU analysis (if configured)
        5. Optionally performs ML-based analysis (if configured)
        6. Optionally performs reverse image search (if configured)
        7. Returns confidence score (0-100) and detailed signals
        8. Verdict is typically "unsigned" with confidence_score and signals
      operationId: verifyMedia
      tags:
        - Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
            examples:
              urlBased:
                summary: Verify by URL
                value:
                  assetUrl: "https://cdn.example.com/photos/image123.jpg"
                  manifestUrl: "https://cdn.example.com/photos/image123.jpg.c2pa"
                  policyId: "default"
              base64Embedded:
                summary: Verify with embedded data
                value:
                  assetBase64: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=="
                  manifestBase64: "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9..."
                  policyId: "strict"
          multipart/form-data:
            schema:
              type: object
              required:
                - asset
                - manifest
              properties:
                asset:
                  type: string
                  format: binary
                  description: The media file (photo or video)
                manifest:
                  type: string
                  format: binary
                  description: The C2PA manifest file
                policyId:
                  type: string
                  description: Policy identifier to apply
                  default: default
      responses:
        '200':
          description: Verification completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
              examples:
                certifiedVerified:
                  summary: Certified mode - Authentic media
                  value:
                    verificationId: "ver_1a2b3c4d5e6f"
                    mode: "certified"
                    verdict: "verified"
                    confidence_score: 100
                    assetSha256: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                    reasons:
                      - "Content binding hash matches"
                      - "Signature valid"
                      - "Device certificate chain valid"
                      - "Hardware attestation present"
                    metadata:
                      deviceId: "dev_android_pixel7_abc123"
                      capturedAt: "2024-01-15T10:30:00Z"
                      location: null
                    evidencePackageUrl: "https://api.popc.example.com/v1/evidence/ver_1a2b3c4d5e6f"
                certifiedTampered:
                  summary: Certified mode - Tampered media
                  value:
                    verificationId: "ver_9z8y7x6w5v4u"
                    mode: "certified"
                    verdict: "tampered"
                    assetSha256: "d4f5e6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5"
                    reasons:
                      - "Content binding hash mismatch"
                    metadata: null
                    evidencePackageUrl: null
                heuristicHighConfidence:
                  summary: Heuristic mode - High confidence
                  value:
                    verificationId: "ver_h1x2y3z4w5v6"
                    mode: "heuristic"
                    verdict: "unsigned"
                    confidence_score: 78
                    assetSha256: "c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2"
                    reasons:
                      - "No C2PA manifest found"
                      - "Running heuristic analysis"
                    metadata: null
                    evidencePackageUrl: null
                    signals:
                      exif:
                        present: true
                        camera: "Canon EOS R5"
                        createDate: "2024-01-15T10:30:00Z"
                        gps:
                          lat: 37.7749
                          lon: -122.4194
                      jpeg:
                        recompressionDetected: false
                        quantTableAnomaly: false
                        progressive: true
                      noise:
                        prnuChecked: false
                      reverse_image:
                        attempted: false
                heuristicLowConfidence:
                  summary: Heuristic mode - Low confidence
                  value:
                    verificationId: "ver_h9a8b7c6d5e4"
                    mode: "heuristic"
                    verdict: "unsigned"
                    confidence_score: 32
                    assetSha256: "f1e2d3c4b5a6978685746352413029181716151413121110090807060504030201"
                    reasons:
                      - "No C2PA manifest found"
                      - "Running heuristic analysis"
                    metadata: null
                    evidencePackageUrl: null
                    signals:
                      exif:
                        present: true
                        software: "Adobe Photoshop 2024"
                        createDate: "2024-01-12T08:15:00Z"
                      jpeg:
                        recompressionDetected: true
                        quantTableAnomaly: true
                        progressive: false
                      noise:
                        prnuChecked: false
                      reverse_image:
                        attempted: false
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "invalid_request"
                message: "Asset exceeds maximum size of 100MB"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/enroll:
    post:
      summary: Enroll a device
      description: |
        Enrolls a new device with hardware attestation for trusted capture.

        The endpoint:
        1. Validates device attestation (Android Key Attestation, Apple DeviceCheck, etc.)
        2. Extracts device public key
        3. Verifies certificate chain
        4. Stores device enrollment record
        5. Returns device ID for future verifications
      operationId: enrollDevice
      tags:
        - Enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentRequest'
            examples:
              android:
                summary: Android device enrollment
                value:
                  platform: "android"
                  publicKey: "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE..."
                  attestationCertChain:
                    - "MIICeDCCAh6gAwIBAgIBATAKBggqhkjOPQQDAjA5..."
                    - "MIICmTCCAkCgAwIBAgIJANg8..."
                  attestationType: "android_key_attestation"
                  deviceMetadata:
                    manufacturer: "Google"
                    model: "Pixel 7"
                    osVersion: "14"
              ios:
                summary: iOS device enrollment
                value:
                  platform: "ios"
                  publicKey: "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE..."
                  attestationCertChain:
                    - "MIICeDCCAh6gAwIBAgIBATAKBggqhkjOPQQDAjA5..."
                  attestationType: "apple_devicecheck"
                  deviceMetadata:
                    manufacturer: "Apple"
                    model: "iPhone 15 Pro"
                    osVersion: "17.2"
      responses:
        '201':
          description: Device enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentResponse'
              example:
                deviceId: "dev_android_pixel7_abc123"
                enrolledAt: "2024-01-15T10:30:00Z"
                expiresAt: "2025-01-15T10:30:00Z"
                status: "active"
                attestationVerified: true
        '400':
          description: Invalid enrollment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "invalid_attestation"
                message: "Attestation certificate chain validation failed"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Device already enrolled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "device_exists"
                message: "Device with this public key is already enrolled"
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/timestamp:
    post:
      summary: Request trusted timestamp
      description: |
        Requests an RFC-3161 compliant trusted timestamp for a content hash.

        Returns a cryptographically signed timestamp that can be used as evidence
        of when a particular piece of content existed.
      operationId: requestTimestamp
      tags:
        - Timestamp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contentHash
              properties:
                contentHash:
                  type: string
                  pattern: '^[a-f0-9]{64}$'
                  description: SHA-256 hash of the content to timestamp
                  example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                hashAlgorithm:
                  type: string
                  enum: [sha256, sha512]
                  default: sha256
                  description: Hash algorithm used
      responses:
        '200':
          description: Timestamp created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - timestamp
                  - timestampToken
                  - contentHash
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    description: RFC-3339 timestamp
                    example: "2024-01-15T10:30:00Z"
                  timestampToken:
                    type: string
                    format: byte
                    description: Base64-encoded RFC-3161 timestamp token
                    example: "MIIGfwYJKoZIhvcNAQcCoIIGcDCCBmwCAQMxDTALBglghkgBZQMEAgEwga..."
                  contentHash:
                    type: string
                    pattern: '^[a-f0-9]{64}$'
                    description: The content hash that was timestamped
                    example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                  tsaUrl:
                    type: string
                    format: uri
                    description: URL of the timestamp authority
                    example: "https://tsa.popc.example.com"
              example:
                timestamp: "2024-01-15T10:30:00Z"
                timestampToken: "MIIGfwYJKoZIhvcNAQcCoIIGcDCCBmwCAQMxDTALBglghkgBZQMEAgEwga..."
                contentHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                tsaUrl: "https://tsa.popc.example.com"
        '400':
          description: Invalid timestamp request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/verify/ui:
    get:
      summary: Get verification result UI
      description: |
        Returns an HTML page displaying verification results in a human-readable format.
        Useful for sharing verification results with non-technical users.
      operationId: getVerificationUI
      tags:
        - Verification
      parameters:
        - name: verificationId
          in: query
          required: true
          schema:
            type: string
            pattern: '^ver_[a-z0-9]+$'
          description: The verification ID from a previous /v1/verify call
          example: "ver_1a2b3c4d5e6f"
      responses:
        '200':
          description: HTML verification result page
          content:
            text/html:
              schema:
                type: string
              example: |
                <!DOCTYPE html>
                <html>
                <head><title>PoPC Verification Result</title></head>
                <body>
                  <h1>✅ Verified</h1>
                  <p>This media was captured by a trusted device and has not been tampered with.</p>
                </body>
                </html>
        '404':
          description: Verification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "not_found"
                message: "Verification ID not found"
        '500':
          $ref: '#/components/responses/ServerError'
      security: []

  /v1/evidence/{verificationId}:
    get:
      summary: Download evidence package
      description: |
        Downloads a complete evidence package for a verification.

        The package includes:
        - Original asset
        - C2PA manifest
        - Verification result with all checks
        - Device certificate chain
        - Transparency log inclusion proof
        - RFC-3161 timestamp

        Suitable for legal/audit purposes.
      operationId: downloadEvidencePackage
      tags:
        - Verification
      parameters:
        - name: verificationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^ver_[a-z0-9]+$'
          description: The verification ID
          example: "ver_1a2b3c4d5e6f"
      responses:
        '200':
          description: Evidence package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidencePackage'
        '404':
          description: Verification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

  schemas:
    VerifyRequest:
      $ref: './schemas/VerifyRequest.json'

    VerifyResponse:
      $ref: './schemas/VerifyResponse.json'

    HeuristicSignals:
      type: object
      description: |
        Non-cryptographic signals collected during heuristic verification.
        These signals provide evidence about media authenticity when a cryptographic manifest is not present.
        Not all signals will be present in every response; availability depends on the asset type and analysis performed.
      properties:
        exif:
          type: object
          description: EXIF metadata extracted from the asset
          properties:
            present:
              type: boolean
              description: Whether EXIF metadata was found
            camera:
              type: string
              description: Camera make/model from EXIF
              example: "Canon EOS R5"
            software:
              type: string
              description: Software used to process the image
              example: "Adobe Photoshop 2024"
            createDate:
              type: string
              format: date-time
              description: Creation timestamp from EXIF
              example: "2024-01-15T10:30:00Z"
            gps:
              type: object
              description: GPS coordinates from EXIF
              properties:
                lat:
                  type: number
                  minimum: -90
                  maximum: 90
                  description: Latitude in decimal degrees
                  example: 37.7749
                lon:
                  type: number
                  minimum: -180
                  maximum: 180
                  description: Longitude in decimal degrees
                  example: -122.4194
          required: [present]
        jpeg:
          type: object
          description: JPEG compression analysis
          properties:
            recompressionDetected:
              type: boolean
              description: Whether multiple compression cycles were detected
              example: false
            quantTableAnomaly:
              type: boolean
              description: Whether quantization table shows anomalies
              example: false
            progressive:
              type: boolean
              description: Whether the JPEG uses progressive encoding
              example: true
        noise:
          type: object
          description: Photo Response Non-Uniformity (PRNU) analysis
          properties:
            prnuChecked:
              type: boolean
              description: Whether PRNU analysis was performed
              example: false
            matched:
              type: boolean
              description: Whether PRNU pattern matched a known device
              example: false
            score:
              type: number
              minimum: 0
              maximum: 100
              description: PRNU match confidence score (0-100)
              example: 85
          required: [prnuChecked]
        ml:
          type: object
          description: Machine learning analysis (placeholder for future use)
          properties:
            model:
              type: string
              description: ML model used for analysis
              example: "deepfake-detector-v2"
            score:
              type: number
              minimum: 0
              maximum: 100
              description: ML analysis confidence score
              example: 92
        reverse_image:
          type: object
          description: Reverse image search results
          properties:
            attempted:
              type: boolean
              description: Whether reverse image search was attempted
              example: false
            earliestFound:
              type: string
              format: date-time
              description: Earliest date this image was found online
              example: "2024-01-10T08:20:00Z"
            source:
              type: string
              format: uri
              description: URL where the image was found
              example: "https://example.com/photo.jpg"
          required: [attempted]
        upload_channel:
          type: object
          description: Upload channel security signals
          properties:
            signedForm:
              type: boolean
              description: Whether the upload form was cryptographically signed
              example: true

    EnrollmentRequest:
      $ref: './schemas/EnrollmentRequest.json'

    EnrollmentResponse:
      $ref: './schemas/EnrollmentResponse.json'

    EvidencePackage:
      $ref: './schemas/EvidencePackage.json'

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Machine-readable error code
          example: "invalid_request"
        message:
          type: string
          description: Human-readable error message
          example: "Asset exceeds maximum size of 100MB"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  responses:
    Unauthorized:
      description: Authentication required or failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Invalid or missing API key"

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Requests remaining in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "rate_limit_exceeded"
            message: "Too many requests. Please try again in 60 seconds."

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_error"
            message: "An unexpected error occurred. Please try again later."
